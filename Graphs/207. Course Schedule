class Solution {
private:
    //detect cycle
    bool dfs(vector<vector<int>>& adj,vector<int> &vis,vector<int> &pathvis, int node){
        vis[node]=1;
        pathvis[node]=1;

        for(auto it:adj[node]){
            if(!vis[it]){
                if(dfs(adj,vis,pathvis,it)==true) return true;
            }
            else if(pathvis[it]==1 && vis[it]==1) return true;
        }
        pathvis[node]=0;
        return false;
    }

public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int>vis(numCourses,0);
        vector<int>pathvis(numCourses,0);

        vector<vector<int>>adj(numCourses);
        for(int i=0; i<prerequisites.size(); i++){
            int a=prerequisites[i][0];
            int b=prerequisites[i][1];

            adj[b].push_back(a);
        }

        for(int i=0; i<numCourses; i++){
            if(!vis[i]){
                if(dfs(adj,vis,pathvis,i)==true) return false; //cycle found so all courses cannot be found
            }
        }
        return true;
    }
};
