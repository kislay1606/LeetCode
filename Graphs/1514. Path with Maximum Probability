class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start_node, int end_node) {
        vector<vector<pair<int,double>>>adj(n); //u:{v,p}
        for(int i=0; i<edges.size(); i++){
            int u=edges[i][0];
            int v=edges[i][1];
            double p=succProb[i];

            adj[u].push_back({v,p});
            adj[v].push_back({u,p});
        }

        vector<double>probab(n,0.0);
        probab[start_node]=1.0;

        priority_queue<pair<double,int>>pq; //max heap <prob,node>
        pq.push({1.0,start_node});

        while(!pq.empty()){
            double prob=pq.top().first;
            int node=pq.top().second;
            pq.pop();

            if(node==end_node) return prob;

            for(auto it:adj[node]){
                int nextnode=it.first;
                double nextprob=it.second;
                double totalprob=nextprob*probab[node];

                if(totalprob > probab[nextnode]){
                    probab[nextnode]=totalprob;
                    pq.push({totalprob,nextnode});
                }
            }
        }
        return 0.0;
    }
};
