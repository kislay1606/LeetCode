class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        vector<vector<int>>adj(n);
        for(int i=0; i<connections.size(); i++){
            int u=connections[i][0];
            int v=connections[i][1];

            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        if(connections.size() < n-1) return -1;

        vector<int>vis(n);
        queue<int>q;
        int components=0;

        for(int i=0; i<n; i++){
            if(!vis[i]){
                components++;
                q.push(i);
                vis[i]=1;

                while(!q.empty()){
                    int node=q.front();
                    q.pop();

                    for(auto it:adj[node]){
                        if(!vis[it]){
                            vis[it]=1;
                            q.push(it);
                        }
                    }
                }
            }
        }
        return components-1;
    }
};



//USING DISJOINT SETS
class disjointSet{
    vector<int>size,parent;

public:
    disjointSet(int n){
        size.resize(n,1);
        parent.resize(n);
        for(int i=0; i<parent.size(); i++){
            parent[i]=i;
        }
    }

    int findUltPar(int node){
        if(node==parent[node]) return node;

        else{
           return parent[node]=findUltPar(parent[node]); //path compression
        }
    }

    void unionBySize(int u, int v){
        int up_u=findUltPar(u);
        int up_v=findUltPar(v);

        if(up_u == up_v) return;

        if(size[up_u] < size[up_v]){
            parent[up_u]=up_v;
            size[up_v] += size[up_u];
        }
        else{
            parent[up_v]=up_u;
            size[up_u] += size[up_v];
        }
    }   
};

class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        disjointSet ds(n);

        if(connections.size() < n-1) return -1; //not enough edges

        for(auto it:connections){
            int u=it[0];
            int v=it[1];
            ds.unionBySize(u,v);
            
        }
        
        int components=0;
        for(int i=0; i<n; i++){
            if(ds.findUltPar(i)==i) components++;
        }

        return components-1;
    }
};
