class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        vector<vector<int>>adj(n);
        for(int i=0; i<connections.size(); i++){
            int u=connections[i][0];
            int v=connections[i][1];

            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        if(connections.size() < n-1) return -1;

        vector<int>vis(n);
        queue<int>q;
        int components=0;

        for(int i=0; i<n; i++){
            if(!vis[i]){
                components++;
                q.push(i);
                vis[i]=1;

                while(!q.empty()){
                    int node=q.front();
                    q.pop();

                    for(auto it:adj[node]){
                        if(!vis[it]){
                            vis[it]=1;
                            q.push(it);
                        }
                    }
                }
            }
        }
        return components-1;
    }
};
