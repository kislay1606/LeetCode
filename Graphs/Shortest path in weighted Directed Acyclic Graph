// User function Template for C++
class Solution {
  private:
    void topo(vector<vector<pair<int,int>>> &adj, vector<int> &vis, stack<int> &st, int node){
        vis[node]=1;
        
        for(auto it: adj[node]){
            int v=it.first;
            if(!vis[v]){
                topo(adj,vis,st,v);
            }
        }
        st.push(node);
    }
    
  public:
    vector<int> shortestPath(int V, int E, vector<vector<int>>& edges) {
        vector<vector<pair<int,int>>>adj(V);
        for(int i=0; i<edges.size(); i++){
            int u=edges[i][0];
            int v=edges[i][1];
            int wt=edges[i][2];
            
            adj[u].push_back({v,wt});
        }
        
        vector<int>vis(V,0);
        stack<int>st;
        for(int i=0; i<V; i++){
            if(!vis[i]){
                topo(adj,vis,st,i);
            }
        }
        
        vector<int>dist(V,INT_MAX);
        dist[0]=0;
        while(!st.empty()){
            int node=st.top();
            st.pop();
            
            for(auto it:adj[node]){
                int v=it.first;
                int wt=it.second;
                if(dist[node]!=INT_MAX && dist[node]+wt < dist[v]){
                    dist[v]=dist[node]+wt;
                }
            }
        }
        
        for(int i=0; i<V; i++){
            if(dist[i]==INT_MAX){
                dist[i]=-1;
            }
        }
        return dist;
    }
};
