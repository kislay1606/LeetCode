class Solution {
  public:
    bool detect(int start, vector<vector<int>> &adj, vector<int> &vis){
        queue<pair<int,int>>q; //<node,parent>
        vis[start]=1;
        q.push({start,-1});
        
        while(!q.empty()){
            int node=q.front().first;
            int parent=q.front().second;
            q.pop();
            
            for(auto neighbour: adj[node]){
                if(vis[neighbour]!=1){
                    q.push({neighbour,node});
                    vis[neighbour]=1;
                }
                else if(neighbour != parent) return true;
            }
        }
        return false;
    }
    
    bool isCycle(int V, vector<vector<int>>& edges) {
        vector<vector<int>>adj(V);
        for(int i=0; i<edges.size(); i++){
            int u=edges[i][0];
            int v=edges[i][1];
            
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        
        vector<int>vis(V,0);
        for(int i=0; i<V; i++){
            if(!vis[i]){
                if(detect(i,adj,vis)==true) return true;
            }
        }
        return false;
    }
};
