class disjointSet{
    vector<int>size,parent;
public:
    disjointSet(int n){
        size.resize(n,1);
        parent.resize(n);

        for(int i=0; i<n; i++){
            parent[i]=i;
        }
    }

    int findUltPar(int node){
        if(node == parent[node]) return node;
        else return parent[node]=findUltPar(parent[node]);
    }

    void unionBySize(int u,int v){
        int up_u=findUltPar(u);
        int up_v=findUltPar(v);

        if(up_u == up_v) return;

        if(size[up_u] < size[up_v]){
            parent[up_u]=up_v;
            size[up_v]+=size[up_u];
        }
        else{
            parent[up_v]=up_u;
            size[up_u]+=size[up_v];
        }
    }
};

class Solution {
public:
    int removeStones(vector<vector<int>>& stones) {
        int n=stones.size();
        
        int maxrow=0;
        int maxcol=0;

        for(auto it:stones){
            maxrow=max(maxrow,it[0]);
            maxcol=max(maxcol,it[1]);
        }

        disjointSet ds(maxrow + maxcol + 2);

        unordered_map<int,int>stoneNodes;

        for(auto it:stones){
            int noderow=it[0];
            int nodecol=it[1]+maxrow+1;

            ds.unionBySize(noderow,nodecol);

            stoneNodes[noderow]=1;
            stoneNodes[nodecol]=1;
        }

        int count=0;
        for(auto it:stoneNodes){
            if(ds.findUltPar(it.first)==it.first) count++;
        }

        return n-count;
    }
};
