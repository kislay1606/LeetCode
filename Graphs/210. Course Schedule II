class Solution {
private:
    bool dfs(vector<vector<int>> &adj, vector<int> &vis, vector<int> &pathvis, int node, vector<int> &path){
        vis[node]=1;
        pathvis[node]=1;
        for(auto it:adj[node]){
            if(!vis[it]){
                if(dfs(adj,vis,pathvis,it,path)==true) return true;
            }
            else if(pathvis[it]) return true;
        }
        pathvis[node]=0;
        path.push_back(node);
        return false;
    }  

public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int>ans;

        vector<int>vis(numCourses,0);
        vector<int>pathvis(numCourses,0);

        vector<vector<int>>adj(numCourses);
        for(int i=0; i<prerequisites.size(); i++){
            int a=prerequisites[i][0];
            int b=prerequisites[i][1];

            adj[b].push_back(a);
        }

        for(int i=0; i<numCourses; i++){
            if(!vis[i]){
                if(dfs(adj,vis,pathvis,i,ans)==true) return {}; //cycle found so return empty arr
            }
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};
