
class Solution {
  public:
    void bfs(vector<vector<int>>&adj, vector<int>&vis, int i, vector<int>&ans){
        int n=adj.size();
        
        queue<int>q;
        q.push(i);
        
        vis[i]=1;
        
        while(!q.empty()){
            int node=q.front();
            q.pop();
            ans.push_back(node);
            
            for(auto it:adj[node]){
                if(!vis[it]){
                    vis[it]=1;
                    q.push(it);
                }
            }
        }
    }
    
    vector<vector<int>> getComponents(int V, vector<vector<int>>& edges) {
        vector<vector<int>>adj(V);
        for(int i=0; i<edges.size(); i++){
            int u=edges[i][0];
            int v=edges[i][1];
            
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        
        vector<vector<int>>ans;
        vector<int>vis(V,0);
        
        for(int i=0; i<V; i++){
            vector<int>component;
            if(!vis[i]){
                vis[i]=1;
                bfs(adj,vis,i,component);
                ans.push_back(component);
            }
        }
        return ans;
    }
};
