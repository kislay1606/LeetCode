class Solution {
public:
    int countPaths(int n, vector<vector<int>>& roads) {
        int MOD=1000000007;

        vector<vector<pair<int,int>>>adj(n);
        for(int i=0; i<roads.size(); i++){
            int u=roads[i][0];
            int v=roads[i][1];
            int t=roads[i][2];

            adj[u].push_back({v,t});
            adj[v].push_back({u,t});
        }

        vector<long long>time(n,LLONG_MAX);
        vector<long long>ways(n,0);
        time[0]=0;
        ways[0]=1;

        priority_queue<pair<long long,int>,vector<pair<long long,int>>,greater<pair<long long,int>>>pq; //<time,node>
        pq.push({0,0});

        while(!pq.empty()){
            long long t=pq.top().first;
            int node=pq.top().second;
            pq.pop();

            if(t > time[node]) continue;

            for(auto it:adj[node]){
                int nextnode=it.first;
                long long nexttime=it.second;
                long long totaltime=nexttime+t;

                if(totaltime < time[nextnode]){
                    time[nextnode]=totaltime;
                    ways[nextnode]=ways[node];
                    pq.push({totaltime,nextnode});
                }
                else if(totaltime == time[nextnode]){
                    ways[nextnode] = (ways[nextnode]+ways[node])%MOD;
                }
            }
        }
        return ways[n-1]%MOD;
    }
};
