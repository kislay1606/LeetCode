class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<pair<int,int>>>adj(n+1);
        for(int i=0; i<times.size(); i++){
            int u=times[i][0];
            int v=times[i][1];
            int t=times[i][2];

            adj[u].push_back({v,t});
        }

        vector<int>time(n+1,INT_MAX);
        time[k]=0;

        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq; //<time,node>
        pq.push({0,k});

        while(!pq.empty()){
            int t=pq.top().first;
            int node=pq.top().second;
            pq.pop();

            if(t > time[node]) continue;  //better time is alreday found so skip

            for(auto it:adj[node]){
                int nextnode=it.first;
                int nexttime=it.second;

                int newtime=t+nexttime;
                if(newtime < time[nextnode]){
                    time[nextnode]=newtime;
                    pq.push({newtime,nextnode});
                }
            }
        }

        int ans=0;
        for(int i=1; i<time.size(); i++){
            if(time[i]==INT_MAX) return -1;
            ans=max(ans,time[i]);
        }
        return ans;
    }
};
