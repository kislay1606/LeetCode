class Solution {
  public:
    vector<int> bellmanFord(int V, vector<vector<int>>& edges, int src) {
        vector<int>dist(V,1e8);
        dist[src]=0;
        
        //iterate for n-1 times and relax
        for(int i=0; i<V-1; i++){
            for(auto it:edges){
                int u=it[0];
                int v=it[1];
                int wt=it[2];
                
                if(dist[u]!=1e8 && dist[u]+wt < dist[v]){
                    dist[v]=dist[u]+wt;
                }
            }
        }
        
        //relax 1 more time to check -ve cycle
        for(auto it:edges){
            int u=it[0];
            int v=it[1];
            int wt=it[2];
            
            //-ve cycle exists
            if(dist[u]!=1e8 && dist[u]+wt < dist[v]){
                return {-1};
            }
        }
        return dist;
    }
};
