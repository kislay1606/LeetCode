class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<vector<pair<int,int>>>adj(n);
        for(int i=0; i<flights.size(); i++){
            int u=flights[i][0];
            int v=flights[i][1];
            int c=flights[i][2];

            adj[u].push_back({v,c});
        }

        vector<int>dist(n,INT_MAX);
        dist[src]=0;

        //<stop,<node,dist>>
        priority_queue<pair<int,pair<int,int>> , vector<pair<int,pair<int,int>>> , greater<pair<int,pair<int,int>>> >pq; 
        pq.push({0,{src,0}});
        
        int mincost=INT_MAX;

        while(!pq.empty()){
            int stop=pq.top().first;
            int node=pq.top().second.first;
            int cost=pq.top().second.second;
            pq.pop();

            if(stop > k) continue;

            for(auto it:adj[node]){
                int nextnode=it.first;
                int edgecost=it.second;
                int totalcost=edgecost+cost;

                if(totalcost < dist[nextnode]){
                    dist[nextnode]=totalcost;
                    pq.push({stop+1,{nextnode,totalcost}});
                }
            }
        }
        if(dist[dst]==INT_MAX) return -1;
        else return dist[dst];
    }
};
