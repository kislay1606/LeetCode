//using kahn's algo-BFS
class Solution {
  public:
    vector<int> topoSort(int V, vector<vector<int>>& edges) {
        
        //get the adjacency list
        vector<vector<int>>adj(V);
        for(int i=0; i<edges.size(); i++){
            int u=edges[i][0];
            int v=edges[i][1];
            
            adj[u].push_back(v);
        }
        
        //find the indegree
        vector<int>indegree(V);
        for(int i=0; i<V; i++){
            for(auto it:adj[i]){
                indegree[it]++;
            }
        }
        
        
        //push the nodes with indegree 0 in the q
        queue<int>q;
        for(int i=0; i<V; i++){
            if(indegree[i]==0) q.push(i);
        }
        
        
        vector<int>ans; //to store the topo order
        while(!q.empty()){
            int node=q.front();
            q.pop();
            ans.push_back(node);
            
            for(auto it: adj[node]){
                indegree[it]--;
                if(indegree[it]==0){
                    q.push(it);
                }
            }
        }
        return ans;
    }
};
