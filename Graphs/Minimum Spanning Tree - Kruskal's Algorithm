class DisjointSet{
    vector<int>size,parent;
  public:
    DisjointSet(int n){
        size.resize(n,1);
        parent.resize(n);
        
        for(int i=0; i<n; i++){
            parent[i]=i;
        }
    }
    
    int findUltPar(int node){
        if(node==parent[node]) return node;
        
        else return parent[node]=findUltPar(parent[node]);
    }
    
    void unionBySize(int u, int v){
        int up_u=findUltPar(u);
        int up_v=findUltPar(v);
        
        if(up_u == up_v) return;
        
        if(size[up_u] < size[up_v]){
            parent[up_u]=up_v;
            size[up_v] += size[up_u];
        }
        else{
            parent[up_v]=up_u;
            size[up_u] += size[up_v];
        }
    }
};

class Solution {
  public:
    int kruskalsMST(int V, vector<vector<int>> &edges) {
        DisjointSet ds(V);
        sort(edges.begin(),edges.end(),[](auto &a, auto &b){
            return a[2] < b[2];
        });
        
        int sum=0;
        
        for(auto it:edges){
            int u=it[0];
            int v=it[1];
            int wt=it[2];
            
            if(ds.findUltPar(u) != ds.findUltPar(v)){
                sum += wt;
                ds.unionBySize(u,v);
            }
        }
        return sum;
    }
};
