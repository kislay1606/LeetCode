class Solution {
  public:
    bool detect(int start, int parent, vector<vector<int>> &adj, vector<int> &vis){
        vis[start]=1;
        
        for(auto it: adj[start]){
            if(!vis[it]){
                vis[it]=1;
                if(detect(it,start,adj,vis)==true) return true;
            }
            else if(it != parent) return true;
        }
        return false;
    }
    
    bool isCycle(int V, vector<vector<int>>& edges) {
        vector<vector<int>>adj(V);
        for(int i=0; i<edges.size(); i++){
            int u=edges[i][0];
            int v=edges[i][1];
            
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        
        vector<int>vis(V,0);
        
        for(int i=0; i<V; i++){
            if(!vis[i]){
                if(detect(i,-1,adj,vis)==true) return true;
            }
        }
        return false;
    }
};
