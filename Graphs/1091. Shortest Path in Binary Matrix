//using Dijkstra's algo
class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int r=grid.size();
        int c=grid[0].size();

        if(grid[0][0]==1 || grid[r-1][c-1]==1) return -1;

        vector<pair<int,int>>directions={{0,-1},{0,1},{-1,0},{1,0},{-1,-1},{-1,1},{1,-1},{1,1}};

        priority_queue< pair<int,pair<int,int>> , vector<pair<int,pair<int,int>>> , greater<pair<int,pair<int,int>>> >pq;
        pq.push({1,{0,0}});
        grid[0][0]=1;

        while(!pq.empty()){
            int dist=pq.top().first;
            int row=pq.top().second.first;
            int col=pq.top().second.second;
            pq.pop();

            if(row==r-1 && col==c-1) return dist;

            for(int i=0; i<8; i++){
                int nrow=row+directions[i].first;
                int ncol=col+directions[i].second;

                if(nrow>=0 && nrow<r && ncol>=0 && ncol<c && grid[nrow][ncol]==0){
                    grid[nrow][ncol]=1;
                    pq.push({dist+1,{nrow,ncol}});
                }
            }
        }
        return -1;
    }
};
