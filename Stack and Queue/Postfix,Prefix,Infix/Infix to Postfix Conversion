class Solution {
  private:
    int priority(char ch){
        if(ch=='^') return 3;
        
        else if(ch=='*' || ch=='/') return 2;
        
        else if(ch=='+' || ch=='-') return 1;
        
        else return -1;
    }
    
  public:
    string infixToPostfix(string& exp) {
        int n=exp.length();
        stack<char>st;
        string ans="";
        
        int i=0;
        while(i<n){
            if(exp[i]>='a'&&exp[i]<='z' || exp[i]>='A'&&exp[i]<='Z' || exp[i]>='0'&&exp[i]<='9'){
                ans += exp[i];
            }
            
            else if(exp[i]=='('){
                st.push(exp[i]);  
            } 
            
            else if(exp[i]==')'){
                while(!st.empty() && st.top()!='('){
                    ans += st.top();
                    st.pop();
                }
                st.pop();
            }
            
            else{
                while(!st.empty() && priority(exp[i])<=priority(st.top())){
                    ans += st.top();
                    st.pop();
                }
                st.push(exp[i]);
            }
            i++;
        }
        while(!st.empty()){
            ans += st.top();
            st.pop();
        }
        return ans;
    }
};
