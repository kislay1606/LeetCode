class Solution {
private:
    //next smaller element
    vector<int> findNSEindex(vector<int>& arr){
        int n=arr.size();
        stack<int>st;
        vector<int>ans(n);

        for(int i=n-1; i>=0; i--){
            while(!st.empty() && arr[st.top()]>=arr[i]){
                st.pop();
            }
            if(st.empty()) ans[i]=n;
            else ans[i]=(st.top());

            st.push(i);
        }
        return ans;
    }
    //previous smaller or equal element
    vector<int> findPSEEindex(vector<int>& arr){
        int n=arr.size();
        stack<int>st;
        vector<int>ans(n);

        for(int i=0; i<n; i++){
            while(!st.empty() && arr[st.top()]>arr[i]){
                st.pop();
            }
            if(st.empty()) ans[i]=-1;
            else ans[i]=(st.top());

            st.push(i);
        }
        return ans;
    }
    //next greater element
    vector<int> findNGEindex(vector<int>& arr){
        int n=arr.size();
        stack<int>st;
        vector<int>ans(n);

        for(int i=n-1; i>=0; i--){
            while(!st.empty() && arr[st.top()]<=arr[i]){
                st.pop();
            }
            if(st.empty()) ans[i]=n;
            else ans[i]=(st.top());

            st.push(i);
        }
        return ans;
    }
    //previous greater or equal element
    vector<int> findPGEEindex(vector<int>& arr){
        int n=arr.size();
        stack<int>st;
        vector<int>ans(n);

        for(int i=0; i<n; i++){
            while(!st.empty() && arr[st.top()]<arr[i]){
                st.pop();
            }
            if(st.empty()) ans[i]=-1;
            else ans[i]=(st.top());

            st.push(i);
        }
        return ans;
    }

    long long sumSubarrayMins(vector<int>& arr) {
        int n=arr.size();
        vector<int> nse=findNSEindex(arr);
        vector<int> psee=findPSEEindex(arr);
        long long sum=0;

        for(int i=0; i<n; i++){
            int left=i-psee[i];
            int right=nse[i]-i;

            sum += (long long)arr[i]*left*right;
        }
        return sum;
    }

    long long sumSubarrayMaxs(vector<int>& arr) {
        int n=arr.size();
        vector<int> nge=findNGEindex(arr);
        vector<int> pgee=findPGEEindex(arr);
        long long sum=0;

        for(int i=0; i<n; i++){
            int left=i-pgee[i];
            int right=nge[i]-i;

            sum += (long long)arr[i]*left*right;
        }
        return sum;
    }

public:
    long long subArrayRanges(vector<int>& nums) {
        //sumation of all the min elements + max elements
        long long rangeSum=sumSubarrayMaxs(nums)-sumSubarrayMins(nums);  
        return rangeSum;
    }
};
