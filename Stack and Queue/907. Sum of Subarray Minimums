class Solution {
private:
    vector<int> findNSEindex(vector<int>& arr){
        int n=arr.size();
        stack<int>st;
        vector<int>ans(n);

        for(int i=n-1; i>=0; i--){
            while(!st.empty() && arr[st.top()]>=arr[i]){
                st.pop();
            }
            if(st.empty()) ans[i]=n;
            else ans[i]=(st.top());

            st.push(i);
        }
        return ans;
    }
    vector<int> findBSEEindex(vector<int>& arr){
        int n=arr.size();
        stack<int>st;
        vector<int>ans(n);

        for(int i=0; i<n; i++){
            while(!st.empty() && arr[st.top()]>arr[i]){
                st.pop();
            }
            if(st.empty()) ans[i]=-1;
            else ans[i]=(st.top());

            st.push(i);
        }
        return ans;
    }    
public:
    int sumSubarrayMins(vector<int>& arr) {
        int n=arr.size();
        vector<int> nse=findNSEindex(arr);
        vector<int> bsee=findBSEEindex(arr);
        long long sum=0;
        int mod=1e9+7;


        for(int i=0; i<n; i++){
            int left=i-bsee[i];
            int right=nse[i]-i;

            sum = (sum+(right*left*1LL*arr[i])%mod)%mod;
        }
        return sum;
    }
};
