class Solution {
private:
    void solve(int index,vector<int>& candidates,int target,vector<vector<int>>&ans,vector<int>&sub,int sum){
        int n=candidates.size();
       
        if(sum==target){
            ans.push_back(sub);
            return;
        }

        if(index==n || sum>target) return;

        for(int i=index; i<n; i++){
            //skip the duplicates
            if(i>index && candidates[i]==candidates[i-1]) continue;

            if(sum+candidates[i] > target) break;

            //pick
            sub.push_back(candidates[i]);
            solve(i+1,candidates,target,ans,sub,sum+candidates[i]);
            sub.pop_back();
        }
    }
        
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<vector<int>>ans;
        vector<int>sub;
        solve(0,candidates,target,ans,sub,0);
        return ans;
    }
};
