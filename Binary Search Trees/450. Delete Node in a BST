class Solution {
public:
    //helper function to find inorder successor
    TreeNode* findIS(TreeNode* root){
        while(root->left){
            root=root->left;
        }
        return root;
    }

    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root==NULL) return NULL;

        //search for the key
        //key is in left subtree
        if(key < root->val){
            root->left=deleteNode(root->left,key);
        }

        //key is in right subtree
        else if(key > root->val){
            root->right=deleteNode(root->right,key);
        }

        //key found
        else{
            //no child
            if(root->left==NULL && root->right==NULL){
                delete root;
                return NULL;
            }

            //1 child:left
            else if(root->left!=NULL && root->right==NULL){
                TreeNode* temp=root->left;
                delete root;
                return temp;
            }

            //1 child:right
            else if(root->left==NULL && root->right!=NULL){
                TreeNode* temp=root->right;
                delete root;
                return temp;
            }

            //2 childs
            else{
                TreeNode* IS=findIS(root->right);
                root->val=IS->val; //change the val of root to the inorder successor
                root->right=deleteNode(root->right,IS->val); //delete the duplicate formed
            }
        }
        return root;
    }
};
