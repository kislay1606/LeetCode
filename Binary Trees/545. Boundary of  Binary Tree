class Solution {
  private:
    bool isLeaf(Node* root){
        if(root->left==NULL && root->right==NULL) return true;
        else return false;
    }
    void addLeftBoundary(Node* root,vector<int>& res){
        if(root==NULL) return;
        Node* curr=root->left;
        while(curr){
            if(!isLeaf(curr)) res.push_back(curr->data);
            
            if(curr->left) curr=curr->left;
            else curr=curr->right;
        }
    }
    void addRightBoundary(Node* root,vector<int>& res){
        if(root==NULL) return;
        vector<int>temp;
        Node* curr=root->right;
        while(curr){
            if(!isLeaf(curr)) temp.push_back(curr->data);
            
            if(curr->right) curr=curr->right;
            else curr=curr->left;
        }
        for(int i=temp.size()-1; i>=0; i--){
            res.push_back(temp[i]);
        }
    }
    void addLeaf(Node* root,vector<int>& res){
        if(isLeaf(root)){
          res.push_back(root->data);
          return;
        } 
        
        if(root->left) addLeaf(root->left,res);
        if(root->right) addLeaf(root->right,res);
    }
  
  public:
    vector<int> boundaryTraversal(Node *root) {
        vector<int>ans;
        if(root==NULL) return ans;
        
        if(!isLeaf(root)) ans.push_back(root->data);
        
        addLeftBoundary(root,ans);
        addLeaf(root,ans);
        addRightBoundary(root,ans);
        
        return ans;
    }
};
