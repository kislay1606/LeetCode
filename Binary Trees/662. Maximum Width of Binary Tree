class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        long long maxWidth=0;
        if(root==NULL) return 0;
        queue<pair<TreeNode*,long long>>q;
        q.push({root,0}); //<node,index>

        while(!q.empty()){
            long long startIndex=q.front().second;
            long long endIndex=q.back().second;
            long long currWidth=endIndex-startIndex+1;

            int size=q.size();

            for(int i=0; i<size; i++){
                TreeNode* curr=q.front().first;
                //to avoid integer overflow currIndex=actualIndex-currIndex
                long long currIndex=q.front().second-startIndex; 
                q.pop();

                if(curr->left) q.push({curr->left,currIndex*2+1});
                if(curr->right) q.push({curr->right,currIndex*2+2});
            }
            maxWidth=max(maxWidth,currWidth);
        }
        return maxWidth;
    }
};
