class Solution {
public:
    unordered_map<TreeNode*,TreeNode*>parent;

    //to find the parent nodes of each node
    void dfs(TreeNode* root){
        if(root==NULL) return;
        if(root->left){
            parent[root->left]=root;
            dfs(root->left);
        }
        if(root->right){
            parent[root->right]=root;
            dfs(root->right);
        }
    }  

    //to find the nodes with k distance
    vector<int> bfs(TreeNode* root,TreeNode* target, int k, vector<int> &ans){
        dfs(root); //to get the parents

        queue<TreeNode*>q;
        q.push(target);

        unordered_set<int>visited; //to track the visited nodes
        visited.insert(target->val);

        while(!q.empty()){
            if(k==0) break; //k distance found so break the loop

            int size=q.size();
            for(int i=0; i<size; i++){
                TreeNode* curr=q.front();
                q.pop();

                if(curr->left && !visited.count(curr->left->val)){
                    q.push(curr->left);
                    visited.insert(curr->left->val);
                }
                if(curr->right && !visited.count(curr->right->val)){
                    q.push(curr->right);
                    visited.insert(curr->right->val);
                }
                if(parent.count(curr) && !visited.count(parent[curr]->val)){
                    q.push(parent[curr]);
                    visited.insert(parent[curr]->val);
                }
            }
            k--;
        }

        while(!q.empty()){
            ans.push_back(q.front()->val);
            q.pop();
        }
        return ans;
    }

    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        vector<int>ans;
        bfs(root,target,k,ans);
        return ans;
    }
};
