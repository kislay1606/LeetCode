//RECURSION
class Solution {
private:
    int solve(int index,int amount, vector<int>& coins){
        int n=coins.size();

        //base case
        if(amount==0) return 1;
        if(index>=n || amount<0) return 0;

        int take=0;
        if(amount>=coins[index]){
            take=solve(index,amount-coins[index],coins);
        }
        int skip=solve(index+1,amount,coins);

        return take+skip;
    }    
public:
    int change(int amount, vector<int>& coins) {
        int n=coins.size();
        return solve(0,amount,coins);
    }
};


//MEMOIZATION
class Solution {
private:
    int solve(int index,int amount, vector<int>& coins,vector<vector<int>>&dp){
        int n=coins.size();

        //base case
        if(amount==0) return 1;
        if(index>=n || amount<0) return 0;

        if(dp[index][amount] != -1) return dp[index][amount];

        int take=0;
        if(amount>=coins[index]){
            take=solve(index,amount-coins[index],coins,dp);
        }
        int skip=solve(index+1,amount,coins,dp);

        return dp[index][amount]=take+skip;
    }    
public:
    int change(int amount, vector<int>& coins) {
        int n=coins.size();
        vector<vector<int>>dp(n,vector<int>(amount+1,-1));
        return solve(0,amount,coins,dp);
    }
};

//TABULATION
class Solution {
public:
    int change(int amount, vector<int>& coins) {
        int n=coins.size();
        vector<vector<int>>dp(n,vector<int>(amount+1,0));
        for(int a=0; a<=amount; a++){
            if(a%coins[0]==0) dp[0][a]=1;
        }

        for(int i=1; i<n; i++){
            for(int a=0; a<=amount; a++){
                int take=0;
                if(a>=coins[i]){
                    take=dp[i][a-coins[i]];
                }
                int skip=dp[i-1][a];

                dp[i][a]=take+skip;
            }
        }
        return dp[n-1][amount];
    }
};

//SPACE OPTIMIZATION
class Solution {
public:
    int change(int amount, vector<int>& coins) {
        int n=coins.size();
        if (coins.empty()) return (amount == 0 ? 1 : 0);

        vector<long>prev(amount+1,0);
        for(int a=0; a<=amount; a++){
            if(a%coins[0]==0) prev[a]=1;
        }

        for(int i=1; i<n; i++){
            vector<long>curr(amount+1,0);
            for(int a=0; a<=amount; a++){
                long take=0;
                if(a>=coins[i]){
                    take=curr[a-coins[i]];
                }
                long skip=prev[a];

                curr[a]=take+skip;
            }
            prev=curr;
        }
        return prev[amount];
    }
};
