//MEMOIZATION
class Solution {
private:
    int solve(int i,int j,string word1, string word2,vector<vector<int>>&dp){
        int m=word1.size();
        int n=word2.size();

        //base case
        if(i<0) return j+1; //s1 gets exhausted so insert
        if(j<0) return i+1; //s2 gets exhausted so delete

        if(dp[i][j] != -1) return dp[i][j];

        //matched so no operations
        if(word1[i]==word2[j]) return dp[i][j]= 0+solve(i-1,j-1,word1,word2,dp); 
        //min(insert,delete,replace)
        else return dp[i][j]= min({1+solve(i-1,j,word1,word2,dp),1+solve(i,j-1,word1,word2,dp),1+solve(i-1,j-1,word1,word2,dp)});
    }    
public:
    int minDistance(string word1, string word2) {
        int m=word1.size();
        int n=word2.size();
        vector<vector<int>>dp(m,vector<int>(n,-1));
        return solve(m-1,n-1,word1,word2,dp);
    }
};

//TABULATION
class Solution {   
public:
    int minDistance(string word1, string word2) {
        int m=word1.size();
        int n=word2.size();
        vector<vector<int>>dp(m+1,vector<int>(n+1,0));
        for(int j=0; j<=n; j++)dp[0][j]=j; //s1 gets exhausted
        for(int i=0; i<=m; i++) dp[i][0]=i; //s2 gets exhausted

        for(int i=1; i<=m; i++){
            for(int j=1; j<=n; j++){
                //matched so no operations
                if(word1[i-1]==word2[j-1]) dp[i][j]= 0+dp[i-1][j-1]; 
                
                //min(insert,delete,replace)
                else dp[i][j]= 
                min({1+dp[i-1][j],1+dp[i][j-1],1+dp[i-1][j-1]});
            }
        }
        return dp[m][n];
    }
};
