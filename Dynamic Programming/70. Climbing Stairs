//MEMOIZATION
class Solution {
public:
    vector<int>dp;
    int climbStairs(int n) {
        if(dp.empty()) dp.assign(n+1,-1);

        if(n==0) return 1;
        if(n<0) return 0;

        if(dp[n] != -1) return dp[n];

        return dp[n]=climbStairs(n-1)+climbStairs(n-2);
    }
};

//TABULATION
class Solution {
public:
    vector<int>dp;
    int climbStairs(int n) {
        if(dp.empty()) dp.resize(n+1);

        //base case
        if(n<0) return 0;

        dp[0]=1;
        dp[1]=1;

        for(int i=2; i<=n; i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
};

//TABULATION + Space Optimization
class Solution {
public:
    int climbStairs(int n) {
        int prev1=1;
        int prev2=1;

        for(int i=2; i<=n; i++){
            int curr=prev1+prev2;
            prev2=prev1;
            prev1=curr;
        }
        return prev1;
    }
};
