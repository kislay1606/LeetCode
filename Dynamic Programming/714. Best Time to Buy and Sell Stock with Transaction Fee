//MEMOIZATION
class Solution {
private:
    int solve(int i,int buy,vector<int>& prices, int fee,vector<vector<int>>&dp){
        int n=prices.size();
        int profit=0;

        //base case
        if(i>=n) return 0;

        if(dp[i][buy] != -1) return dp[i][buy];

        //allowed to buy
        if(buy==1){
            int bought=-prices[i]+solve(i+1,0,prices,fee,dp);
            int notbought=0+solve(i+1,1,prices,fee,dp);
            profit=max(bought,notbought);
        }

        //not allowed to buy
        if(buy==0){
            int sell=prices[i]+solve(i+1,1,prices,fee,dp)-fee;
            int notsell=0+solve(i+1,0,prices,fee,dp);
            profit=max(sell,notsell);
        }
        return dp[i][buy]=profit;
    }    
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n=prices.size();
        vector<vector<int>>dp(n,vector<int>(2,-1));
        return solve(0,1,prices,fee,dp);
    }
};

//TABULATION
class Solution {  
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n=prices.size();
        int profit=0;
        vector<vector<int>>dp(n+1,vector<int>(2,0));
        dp[n][0]=dp[n][1]=0;
        for(int i=n-1; i>=0; i--){
            for(int buy=0; buy<2; buy++){
                //allowed to buy
                if(buy==1){
                    int bought=-prices[i]+dp[i+1][0];
                    int notbought=0+dp[i+1][1];
                    profit=max(bought,notbought);
                }

                //not allowed to buy
                if(buy==0){
                    int sell=prices[i]+dp[i+1][1]-fee;
                    int notsell=0+dp[i+1][0];
                    profit=max(sell,notsell);
                }
                dp[i][buy]=profit;
            }
        }
        return dp[0][1];
    }
};

//SPACE OPTIMIZATION
class Solution {  
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n=prices.size();
        int profit=0;
        vector<int>front(2,0),curr(2,0);
        
        for(int i=n-1; i>=0; i--){
            for(int buy=0; buy<2; buy++){
                //allowed to buy
                if(buy==1){
                    int bought=-prices[i]+front[0];
                    int notbought=0+front[1];
                    profit=max(bought,notbought);
                }

                //not allowed to buy
                if(buy==0){
                    int sell=prices[i]+front[1]-fee;
                    int notsell=0+front[0];
                    profit=max(sell,notsell);
                }
                curr[buy]=profit;
            }
            front=curr;
        }
        return front[1];
    }
};
