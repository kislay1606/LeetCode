//RECURSION
class Solution {
private:
    int solve(int index1,int index2,string text1,string text2){
        //base case
        if(index1>=text1.size() || index2>=text2.size()) return 0;

        //match
        if(text1[index1]==text2[index2]){
            return 1+solve(index1+1,index2+1,text1,text2);
        }

        return max(solve(index1,index2+1,text1,text2),solve(index1+1,index2,text1,text2));
    }    
public:
    int longestCommonSubsequence(string text1, string text2) {
        return solve(0,0,text1,text2);
    }
};

//MEMOIZATION
class Solution {
private:
    int solve(int index1,int index2,string text1,string text2,vector<vector<int>>&dp){
        //base case
        if(index1>=text1.size() || index2>=text2.size()) return 0;

        if(dp[index1][index2] != -1) return dp[index1][index2];

        //match
        if(text1[index1]==text2[index2]){
            return dp[index1][index2]= 1+solve(index1+1,index2+1,text1,text2,dp);
        }

        return dp[index1][index2]= max(solve(index1,index2+1,text1,text2,dp),solve(index1+1,index2,text1,text2,dp));
    }    
public:
    int longestCommonSubsequence(string text1, string text2) {
        vector<vector<int>>dp(text1.size(),vector<int>(text2.size(),-1));
        return solve(0,0,text1,text2,dp);
    }
};


//TABULATION
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m=text1.size();
        int n=text2.size();
        vector<vector<int>>dp(m+1,vector<int>(n+1,0));


        for(int i=1; i<=m; i++){
            for(int j=1; j<=n; j++){
                //match
                if(text1[i-1]==text2[j-1]){
                    dp[i][j]= 1+dp[i-1][j-1];
                }
                
                //not match
                else dp[i][j]= max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[m][n];
    }
};
