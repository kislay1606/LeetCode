//RECURSION
class Solution {
private:
    int solve(int i, int j, vector<vector<int>>& obstacleGrid){
        int r=obstacleGrid.size();
        int c=obstacleGrid[0].size();

        //base case
        if(i==r-1 && j==c-1) return 1;
        if(i>r-1 || j>c-1 || obstacleGrid[i][j]==1) return 0;

        int down=solve(i+1,j,obstacleGrid);
        int right=solve(i,j+1,obstacleGrid);

        return down+right;
    }    
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        return solve(0,0,obstacleGrid);
    }
};


//MEMOIZATION
class Solution {
private:
    int solve(int i, int j, vector<vector<int>>& obstacleGrid,vector<vector<int>>&dp){
        int r=obstacleGrid.size();
        int c=obstacleGrid[0].size();

        //base case
        if(i==r-1 && j==c-1) return 1;
        if(i>r-1 || j>c-1 || obstacleGrid[i][j]==1) return 0;

        if(dp[i][j] != -1) return dp[i][j];

        int down=solve(i+1,j,obstacleGrid,dp);
        int right=solve(i,j+1,obstacleGrid,dp);

        return dp[i][j]=down+right;
    }    
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int r=obstacleGrid.size();
        int c=obstacleGrid[0].size();

        //edge case
        if(obstacleGrid[0][0]==1 || obstacleGrid[r-1][c-1]==1) return 0;

        vector<vector<int>>dp(r,vector<int>(c,-1));
        return solve(0,0,obstacleGrid,dp);
    }
};


//TABULATION
class Solution {    
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int r=obstacleGrid.size();
        int c=obstacleGrid[0].size();
        vector<vector<int>>dp(r,vector<int>(c,0));

        //edge case
        if(obstacleGrid[0][0]==1 || obstacleGrid[r-1][c-1]==1) return 0;

        for(int i=0; i<r; i++){
            if(obstacleGrid[i][0]==1) break; //obstacle found
            dp[i][0]=1;
        } 
        for(int j=0; j<c; j++){
            if(obstacleGrid[0][j]==1) break; //obstacle found
            dp[0][j]=1;
        } 

        for(int i=1; i<r; i++){
            for(int j=1; j<c; j++){
                if(obstacleGrid[i][j]!=1){
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];
                }
            }
        }
        return dp[r-1][c-1];
    }
};
