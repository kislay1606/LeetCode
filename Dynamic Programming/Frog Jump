//RECURSION
class Solution {
  private:
    int solve(int i,vector<int>& height){
        if(i==0) return 0;
        
        int jump1=solve(i-1,height) + abs(height[i]-height[i-1]);
        
        int jump2=INT_MAX;
        if(i>1){
            jump2=solve(i-2,height) + abs(height[i]-height[i-2]);
        }
        
        return min(jump1,jump2);
    }
  public:
    int minCost(vector<int>& height) {
        int n=height.size();
        return solve(n-1,height);
    }
};


//MEMOIZATION DP
class Solution {
  private:
    int solve(int i,vector<int>& height,vector<int>& dp){
        if(i==0) return 0;
        
        if(dp[i] != -1) return dp[i];
        
        int jump1=INT_MAX;
        int jump2=INT_MAX;
        
        jump1=solve(i-1,height,dp) + abs(height[i]-height[i-1]);
        
        if(i>1){
            jump2=solve(i-2,height,dp) + abs(height[i]-height[i-2]);
        }
        
        return dp[i]=min(jump1,jump2);
    }
  public:
    int minCost(vector<int>& height) {
        int n=height.size();
        vector<int>dp(n,-1);
        return solve(n-1,height,dp);
    }
};

//TABULATION
class Solution {
  public:
    int minCost(vector<int>& height) {
        int n=height.size();
        vector<int>dp(n);
        
        dp[0]=0;
        
        for(int i=1; i<n; i++){
            int jump1=dp[i-1] + abs(height[i]-height[i-1]);
            int jump2=INT_MAX;
            
            if(i>1){
                jump2=dp[i-2] + abs(height[i]-height[i-2]);
            }
            
            dp[i]=min(jump1,jump2);
        }
        return dp[n-1];
    }
};


//TABULATION + Space Optimization
class Solution {
  public:
    int minCost(vector<int>& height) {
        int n=height.size();
        
        if(n==1) return 0;
        
        int prev2=0;
        int prev1=abs(height[1]-height[0]);
        
        for(int i=2; i<n; i++){
            int jump1=prev1 + abs(height[i]-height[i-1]);
            int jump2=INT_MAX;
            
            if(i>1){
                jump2=prev2 + abs(height[i]-height[i-2]);
            }
            
            int curr=min(jump1,jump2);
            
            prev2=prev1;
            prev1=curr;
        }
        return prev1;
    }
};
