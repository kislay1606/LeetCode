//MEMOIZATION
class Solution {
private:
    bool solve(int i,vector<int>& nums,vector<int>&dp){
        int n=nums.size();

        //base case
        if(i>=n-1) return true;

        if(dp[i]!=-1) return dp[i];

        int maxStep=nums[i];
        for(int step=1; step<=maxStep; step++){
            if(solve(i+step,nums,dp)==true) return dp[i]=true; 
        }
        return dp[i]=false;
    }    
public:
    bool canJump(vector<int>& nums) {
        int n=nums.size();
        vector<int>dp(n,-1);
        return solve(0,nums,dp);
    }
};

//TABULATION
class Solution {   
public:
    bool canJump(vector<int>& nums) {
        int n=nums.size();
        vector<bool>dp(n,false);
        dp[n-1]=true;

        for(int i=n-2; i>=0; i--){
            int maxStep=nums[i];
            for(int step=1; step<=maxStep; step++){
                if(dp[i+step]==true){
                    dp[i]=true;
                    break;
                }  
            }
        }
        return dp[0];
    }
};
