//RECURSION
class Solution {
private:
    int solve(int index,vector<int>&coins,int amount){
        int n=coins.size();

        //base case
        if(amount==0) return 0;
        if(index>=n || amount<0) return 1e9;

        int take=1e9;
        if(amount>=coins[index]){
            take=1+solve(index,coins,amount-coins[index]); //same coin can be reused
        } 
        int skip=0+solve(index+1,coins,amount);

        return min(take,skip);
    }    
public:
    int coinChange(vector<int>& coins, int amount) {
        //edge case
        if(amount==0) return 0;
        int ans=solve(0,coins,amount);

        //convert 1e9 to -1
        if(ans>=1e9) return -1;
        return ans;
    }
};

//MEMOIZATION
class Solution {
private:
    int solve(int index,vector<int>&coins,int amount,vector<vector<int>>&dp){
        int n=coins.size();

        //base case
        if(amount==0) return 0;
        if(index>=n || amount<0) return 1e9;

        if(dp[index][amount] != -1) return dp[index][amount];

        int take=1e9;
        if(amount>=coins[index]){
            take=1+solve(index,coins,amount-coins[index],dp); //same coin can be reused
        } 
        int skip=0+solve(index+1,coins,amount,dp);

        return dp[index][amount] = min(take,skip);
    }    
public:
    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        vector<vector<int>>dp(n,vector<int>(amount+1,-1));

        //edge case
        if(amount==0) return 0;
        int ans=solve(0,coins,amount,dp);

        //convert 1e9 to -1
        if(ans>=1e9) return -1;
        return ans;
    }
};


//TABULATION
class Solution {   
public:
    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        vector<vector<int>>dp(n,vector<int>(amount+1,1e9));
        for(int a=0; a<=amount; a++){
            if(a%coins[0]==0) dp[0][a]=a/coins[0];
        }

        //edge case
        if(amount==0) return 0;
        
        for(int i=1; i<n; i++){
            for(int a=0; a<=amount; a++){
                int take=1e9;
                if(a>=coins[i]){
                    take=1+dp[i][a-coins[i]]; //same coin can be reused
                } 
                int skip=0+dp[i-1][a];

                dp[i][a]=min(take,skip);
            }
        }
        
        int ans=dp[n-1][amount];
        //convert 1e9 to -1
        if(ans>=1e9) return -1;
        return ans;
    }
};

//SPACE OPTIMIZATION
class Solution {   
public:
    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();

        vector<int>prev(amount+1,1e9),curr(amount+1,1e9);
        for(int a=0; a<=amount; a++){
            if(a%coins[0]==0) prev[a]=a/coins[0];
        }

        //edge case
        if(amount==0) return 0;
        
        for(int i=1; i<n; i++){
            for(int a=0; a<=amount; a++){
                int take=1e9;
                if(a>=coins[i]){
                    take=1+curr[a-coins[i]]; //same coin can be reused
                } 
                int skip=0+prev[a];

                curr[a]=min(take,skip);
            }
            prev=curr;
        }
        
        int ans=prev[amount];
        //convert 1e9 to -1
        if(ans>=1e9) return -1;
        return ans;
    }
};
