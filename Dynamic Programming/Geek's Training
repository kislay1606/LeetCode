//RECURSION
class Solution {
  private:
    int solve(vector<vector<int>>& arr,int day,int last){
        int n=arr.size();
        
        //base case
        if(day==0){
            int maxPoint=0;
            for(int i=0; i<3; i++){
                if(i!=last){
                    maxPoint=max(maxPoint,arr[0][i]);
                }
            }
            return maxPoint;
        }
        
        //Recursive call
        int maxPoint=0;
        for(int i=0; i<3; i++){
            int point=0;
            if(i!=last){
                point=arr[day][i] + solve(arr,day-1,i);
            }
            maxPoint=max(point,maxPoint);
        }
        return maxPoint;
    }
  public:
    int maximumPoints(vector<vector<int>>& arr) {
        int n=arr.size();
        return solve(arr,n-1,3);
    }
};


//MEMOIZATION
class Solution {
  private:
    int solve(vector<vector<int>>& arr,int day,int last, vector<vector<int>>&dp){
        int n=arr.size();
        
        //base case
        if(day==0){
            int maxPoint=0;
            for(int i=0; i<3; i++){
                if(i!=last){
                    maxPoint=max(maxPoint,arr[0][i]);
                }
            }
            return maxPoint;
        }
        
        if(dp[day][last] != -1) return dp[day][last];
        
        //Recursive call
        int maxPoint=0;
        for(int i=0; i<3; i++){
            int point=0;
            if(i!=last){
                point=arr[day][i] + solve(arr,day-1,i,dp);
            }
            maxPoint=max(point,maxPoint);
        }
        return dp[day][last]=maxPoint;
    }
  public:
    int maximumPoints(vector<vector<int>>& arr) {
        int n=arr.size();
        vector<vector<int>>dp(n,vector<int>(4,-1));
        return solve(arr,n-1,3,dp);
    }
};
