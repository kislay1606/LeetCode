//RECURSION
class Solution {
private:
    int solve(int i, int j, int m, int n){
        //base case
        if(i>m-1 || j>n-1) return 0;
        if(i==m-1 && j==n-1) return 1;
        
        int bottom = solve(i+1,j,m,n); //bottom
        int right = solve(i,j+1,m,n); //right

        return bottom+right;
    }    
public:
    int uniquePaths(int m, int n) {
        return solve(0,0,m,n);
    }
};

//MEMOIZATION
class Solution {
private:
    int solve(int i, int j, int m, int n,vector<vector<int>>&dp){
        //base case
        if(i>m-1 || j>n-1) return 0;
        if(i==m-1 && j==n-1) return 1;

        if(dp[i][j] != -1) return dp[i][j];
        
        int bottom = solve(i+1,j,m,n,dp); //bottom
        int right = solve(i,j+1,m,n,dp); //right

        return dp[i][j]=bottom+right;
    }    
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>>dp(m,vector<int>(n,-1));
        return solve(0,0,m,n,dp);
    }
};

//TABULATION
class Solution {
private:
    int solve(int m, int n,vector<vector<int>>&dp){

        for(int i=0; i<m; i++) dp[i][0]=1;
        for(int j=0; j<n; j++) dp[0][j]=1;
        
        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }    
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>>dp(m,vector<int>(n,0));
        return solve(m,n,dp);
    }
};

//SPACE OPTIMIZATION
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<int>prev(n,1);
        vector<int>curr(n,1);

        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                curr[j]=prev[j]+curr[j-1]; //val from prev top and curr left
            }
            prev=curr;
        }
        return prev[n-1];
    }
};
