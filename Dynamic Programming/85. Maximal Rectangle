class Solution {
private:
    vector<int> getNSE(vector<int>& arr){
        int n=arr.size();
        vector<int>ans(n);
        stack<int>st;

        for(int i=n-1; i>=0; i--){
            while(!st.empty() && arr[st.top()]>=arr[i]){
                st.pop();
            }

            if(st.empty()) ans[i]=n;
            else ans[i]=st.top();

            st.push(i);
        }
        return ans;
    }
    vector<int> getPSE(vector<int>& arr){
        int n=arr.size();
        vector<int>ans(n);
        stack<int>st;
        for(int i=0; i<n; i++){
            while(!st.empty() && arr[st.top()]>=arr[i]){
                st.pop();
            }

            if(st.empty()) ans[i]=-1;
            else ans[i]=st.top();

            st.push(i);
        }
        return ans;
    }
    int largestAreaHistogram(vector<int>& arr){
        int n=arr.size();
        vector<int>nse=getNSE(arr);
        vector<int>pse=getPSE(arr);
        int maxArea=INT_MIN;

        for(int i=0; i<n; i++){
            int width=nse[i]-pse[i]-1;
            int area=arr[i]*width;

            maxArea=max(area,maxArea);
        }
        return maxArea;
    }    
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        int r=matrix.size();
        int c=matrix[0].size();

        int maxArea=0;
        vector<int>heights(c,0);
        
        for(int i=0; i<r; i++){
            for(int j=0; j<c; j++){
                if(matrix[i][j]=='1') heights[j]++;
                else heights[j]=0;
            }
            int area=largestAreaHistogram(heights);
            maxArea=max(maxArea,area);
        }
        return maxArea;
    }
};
