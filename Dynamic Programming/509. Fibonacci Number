//MEMOIZATION
class Solution {
private:
    int memo(int n,vector<int>&dp){
        if(n<=1) return n;

        if(dp[n] != -1) return dp[n];

        return dp[n]=memo(n-1,dp)+memo(n-2,dp);
    }

public:
    int fib(int n) {
        vector<int>dp(n+1,-1);
        return memo(n,dp);
    }
};


//TABULATION
class Solution {
private:
    int tab(int n,vector<int>&dp){
        if(n==0) return 0;
        dp[0]=0;
        dp[1]=1;

        for(int i=2; i<=n; i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }    
public:
    int fib(int n) {
        vector<int>dp(n+1);
        return tab(n,dp);
    }
};


//TABULATION with Space Optimization
class Solution {
public:
    int fib(int n) {
        if(n==0) return 0;

        int prev2=0;
        int prev1=1;

        for(int i=2; i<=n; i++){
            int curr=prev1+prev2;
            prev2=prev1;
            prev1=curr;
        }
        return prev1;
    }
};
