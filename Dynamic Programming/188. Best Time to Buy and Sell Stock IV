//MEMOIZATION
class Solution {
    private:
    int solve(int k,int i,int buy,vector<int>& prices,vector<vector<vector<int>>>&dp){
        int n=prices.size();
        int profit=0;

        //base case
        if(i>=n || k==0) return 0;

        if(dp[i][buy][k] != -1) return dp[i][buy][k];

        //allowed to buy
        if(buy==1){
            int bought=-prices[i]+solve(k,i+1,0,prices,dp);
            int notbought=0+solve(k,i+1,1,prices,dp);
            profit=max(bought,notbought);
        }

        //not allowed to buy
        if(buy==0){
            int sell=prices[i]+solve(k-1,i+1,1,prices,dp);
            int notsell=0+solve(k,i+1,0,prices,dp);
            profit=max(sell,notsell);
        }
        return dp[i][buy][k]=profit;
    } 
public:
    int maxProfit(int k, vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>>dp(n,vector<vector<int>>(2,vector<int>(k+1,-1)));
        return solve(k,0,1,prices,dp);
    }
};
