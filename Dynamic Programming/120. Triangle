//RECURSION
class Solution {
private:
    int solve(int i, int j, vector<vector<int>>& triangle){
        int n=triangle.size();

        //base case
        if(i==n-1) return triangle[i][j];

        int down=triangle[i][j]+solve(i+1,j,triangle);  //j element of next row
        int diagonal=triangle[i][j]+solve(i+1,j+1,triangle);  //j+1 element of next row

        return min(down,diagonal);
    }    
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        return solve(0,0,triangle);
    }
};

//MEMOIZATION
class Solution {
private:
    int solve(int i, int j, vector<vector<int>>& triangle,vector<vector<int>>&dp){
        int n=triangle.size();

        //base case
        if(i==n-1) return triangle[i][j];

        if(dp[i][j] != -1) return dp[i][j];

        int down=triangle[i][j]+solve(i+1,j,triangle,dp);  //j element of next row
        int diagonal=triangle[i][j]+solve(i+1,j+1,triangle,dp);  //j+1 element of next row

        return dp[i][j] = min(down,diagonal);
    }    
public:
    int minimumTotal(vector<vector<int>>& triangle){
        int n=triangle.size();
        vector<vector<int>>dp;
        for(int i=0; i<n; i++){
            dp.push_back(vector<int>(triangle[i].size(),-1));
        }
        return solve(0,0,triangle,dp);
    }
};

