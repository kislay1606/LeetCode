//USING STACK
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        stack<int>st;
        ListNode* temp=head;
        while(temp != NULL){
            st.push(temp->val);
            temp=temp->next;
        }

        if(st.empty()) return NULL;
        
        ListNode* newHead=new ListNode(st.top());
        st.pop();

        ListNode* curr=newHead;

        while(!st.empty()){
            curr->next=new ListNode(st.top());
            st.pop();
            curr=curr->next;
        }
        return newHead;
    }
};

//ITERATIVE APPROACH
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* curr=head;
        ListNode* prev=NULL;

        while(curr != NULL){
            ListNode* front=curr->next;
            curr->next=prev;
            prev=curr;
            curr=front;
        }
        return prev;
    }
};

//RECURSIVE APPROACH
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        //base case
        if(head==NULL || head->next==NULL) return head;

        ListNode* newHead=reverseList(head->next);

        ListNode* front=head->next;
        front->next=head;
        head->next=NULL;

        return newHead;
    }
};
