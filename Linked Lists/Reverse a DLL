//USING STACK
class Solution {
  public:
    DLLNode* reverseDLL(DLLNode* head) {
        stack<int>st;
        
        DLLNode* temp=head;
        while(temp != NULL){
            st.push(temp->data);
            temp=temp->next;
        }
        
        if(st.empty()) return NULL;
        
        DLLNode* newHead=new DLLNode(st.top());
        newHead->prev=NULL;
        st.pop();
        DLLNode* curr=newHead;
        
        while(!st.empty()){
            curr->next=new DLLNode(st.top());
            curr->next->prev=curr;
            st.pop();
            
            curr=curr->next;
        }
        return newHead;
    }
};

//INPLACE USING SINGLE ITERATION
class Solution {
  public:
    DLLNode* reverseDLL(DLLNode* head) {
        DLLNode* curr=head;
        DLLNode* back=NULL;
        
        while(curr != NULL){
            DLLNode* front=curr->next;
            
            curr->next=back;
            curr->prev=front;
            
            back=curr;
            curr=front;
        }
        return back;
    }
};
