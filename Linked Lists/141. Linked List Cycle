//TORTOISE METHOD
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode* slow=head;
        ListNode* fast=head;

        while(fast != NULL && fast->next != NULL){
            slow=slow->next;
            fast=fast->next->next;

            if(slow==fast) return true;
        }
        return false;
    }
};

//USING MAP
class Solution {
public:
    bool hasCycle(ListNode *head) {
        unordered_set<ListNode*>visited;

        while(head != NULL){
            if(visited.find(head) != visited.end()) return true;

            visited.insert(head);
            head=head->next;
        }
        return false;
    }
};
