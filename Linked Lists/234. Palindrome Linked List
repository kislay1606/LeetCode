class Solution {
public:
    // helper func to reverse the second half
    ListNode* reverseList(ListNode* head) {
        ListNode* curr=head;
        ListNode* prev=NULL;

        while(curr != NULL){
            ListNode* front=curr->next;
            curr->next=prev;
            prev=curr;
            curr=front;
        }
        return prev;
    }
    
    bool isPalindrome(ListNode* head) {
        if(head->next==NULL || head==NULL) return true;

        ListNode* slow=head;
        ListNode* fast=head;
        ListNode* prev=NULL;
        
        //finding the mid of LL
        while(fast!=NULL&&fast->next!=NULL){
            prev=slow;
            slow=slow->next;
            fast=fast->next->next;
        }
        //reverse the right part
        ListNode* right=reverseList(slow);
        
        //dividing the first and the second half
        ListNode* firstHalf=head;
        ListNode* secondHalf=right;
        
        //comparing both the halves
        while(secondHalf != NULL){
            if(firstHalf->val != secondHalf->val) return false;

            firstHalf=firstHalf->next;
            secondHalf=secondHalf->next;
        }
        return true;
    }
};
