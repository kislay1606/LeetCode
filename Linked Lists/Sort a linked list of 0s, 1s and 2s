class Solution {
  public:
    Node* segregate(Node* head) {
        if(head==NULL || head->next==NULL) return head;
        
        int cnt0=0;
        int cnt1=0;
        int cnt2=0;
        Node* temp=head;
         
        while(temp){
            if(temp->data==0) cnt0++;
            else if(temp->data==1) cnt1++;
            else if(temp->data==2) cnt2++;
            
            temp=temp->next;
        }
        
        temp=head;
        while(temp){
            if(cnt0 != 0){
                temp->data=0;
                cnt0--;
            }
            else if(cnt1 != 0){
                temp->data=1;
                cnt1--;
            }
            else if(cnt2 != 0){
                temp->data=2;
                cnt2--;
            }
            
            temp=temp->next;
        }
        return head;
    }
};


//OPTIMAL APPROACH IN SINGLE PASS
class Solution {
  public:
    Node* segregate(Node* head) {
        if(head==NULL || head->next==NULL) return head;
        
        //dummy nodes
        Node* zeroHead=new Node(-1);
        Node* oneHead=new Node(-1);
        Node* twoHead=new Node(-1);
        
        Node* zero=zeroHead;
        Node* one=oneHead;
        Node* two=twoHead;
        
        Node* temp=head;
        while(temp != NULL){
            if(temp->data==0){
                zero->next=temp;
                zero=zero->next;
            }
            else if(temp->data==1){
                one->next=temp;
                one=one->next;
            }
            else if(temp->data==2){
                two->next=temp;
                two=two->next;
            }
            
            temp=temp->next;
        }
        
        if(oneHead->next != NULL) zero->next=oneHead->next;
        else zero->next=twoHead->next; 
        
        one->next=twoHead->next;
        two->next=NULL;
        
        Node* newHead=zeroHead->next;
        
        delete zeroHead;
        delete oneHead;
        delete twoHead;
        
        return newHead;
    }
};
