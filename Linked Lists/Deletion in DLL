Node* DeleteHead(Node* head){
    //base case
    if(head==NULL || head->next==NULL)
    return NULL;
    
    Node* prev=head;
    head=head->next;
    head->back=NULL;
    prev->next=NULL;
    delete prev;
    return head;
}


Node* DeleteTail(Node* head){
    //base case
    if(head==NULL  || head->next==NULL)
    return NULL;

    Node* tail=head;
    while(tail->next != NULL){
        tail=tail->next;
    }
    Node* newTail=tail->back;
    newTail->next=NULL;
    tail->back=NULL;

    delete tail;
    return head;
}


Node* DeleteKthElement(Node* head, int k){
    //base case
    if(head==NULL)
    return NULL;

    int count=0;
    Node* kNode=head;
    while(kNode != NULL){
        count++;
        if(count == k){
            break;
        }
        //standing at the kth element
        kNode=kNode->next;
    }
    Node* prev=kNode->back;
    Node* front=kNode->next;

    //edge cases
    if(prev==NULL && front==NULL){ //single element
        delete kNode;
        return NULL;
    }
    else if(prev==NULL){ //first element
        return DeleteHead(head);
    }
    else if(next==NULL){
        return DeleteTail(head);
    }

    prev->next=front;
    front->back=prev;
    kNode->next=NULL;
    kNode->back=NULL;
    delete kNode;
    
    return head;
}


Node* DeleteNode(Node* temp){
    Node* prev=temp->back;
    Node* front=temp->next;

    //edge case
    if(front==NULL){
        prev->next=NULL;
        temp->back=NULL;
        delete temp; 
        return;
    }

    prev->next=front;
    front->back=prev;
    temp->next=NULL;
    temp->back=NULL;
    delete temp;
    return temp;
}
