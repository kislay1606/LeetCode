Node* InsertBeforeHead(Node* head, int val){
    Node* newHead=new Node(val);
    newHead->next=head;
    newHead->back=NULL;
    head->back=newHead;

    return newHead;
}


Node* InsertBeforeTail(Node* head, int val){
    if(head==NULL) return NULL;

    //single element
    if(head->next==NULL){
        return InsertBeforeHead(head,val);
    }

    Node* temp=head;
    while(temp->next != NULL){
        temp=temp->next;
    }
    Node* newNode=new Node(val);
    newNode->next=temp;
    newNode->back=temp->back;

    temp->back->next=newNode;
    temp->back=newNode;

    return head;
}


Node* InsertBeforeKth(Node* head, int val, int k){
    if(head==NULL) return NULL;

    if(k==1){
        return InsertBeforeHead(head,val);
    }

    Node* temp=head;
    int count=0;
    while(temp != NULL){
       count++;
       if(count==k) break; //standing at kth position
       temp=temp->next;
    }
    Node* newNode=new Node(val);
    newNode->next=temp;
    newNode->back=temp->back;

    temp->back->next=newNode;
    temp->back=newNode;

    return head;
}


Node* InsertBeforeK(Node* head,int k, int val){
    if(head==NULL) return NULL;

    if(head->data==k)
    return InsertBeforeHead(head,val);

    Node* temp=head;
    while(temp->next != NULL){
        if(temp->data==k){
            Node* newNode=new Node(val);
            newNode->next=temp;
            newNode->back=temp->back;

            temp->back->next=newNode;
            temp->back=newNode;
            return head;
        }
        temp=temp->next;   
    }
    return head;
}
