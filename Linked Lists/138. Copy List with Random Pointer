class Solution {
public:
    Node* copyRandomList(Node* head) {
        Node* temp=head;
        //insert copy nodes in between original node
        while(temp){
            Node* copyNode=new Node(temp->val);
            copyNode->next=temp->next;
            temp->next=copyNode;

            temp=temp->next->next;
        }

        //assign random pointers to the copied list
        temp=head;
        while(temp){
            Node* copyNode=temp->next;
            if(temp->random) copyNode->random=temp->random->next;

            temp=temp->next->next;
        }

        //make new copy list 
        Node* dummyHead=new Node(-1);
        Node* res=dummyHead;

        temp=head;
        while(temp){
            res->next=temp->next;
            temp->next=temp->next->next; //to retain the original list

            res=res->next;
            temp=temp->next;
        }

        Node* newHead=dummyHead->next;
        delete dummyHead;
        return newHead;
        
    }
};

//USING HASHPMAP
class Solution {
public:
    Node* copyRandomList(Node* head) {
        unordered_map<Node*,Node*>mpp;
  
        //make new copy nodes and put them in map
        Node* temp=head;
        while(temp){
            Node* newNode=new Node(temp->val);
            mpp[temp]=newNode;
            temp=temp->next;
        }

        //assign next and random to the new nodes
        temp=head;
        while(temp){
            Node* copyNode=mpp[temp];

            copyNode->next=mpp[temp->next];
            copyNode->random=mpp[temp->random];
            temp=temp->next;
        }
        return mpp[head];
    }
};
