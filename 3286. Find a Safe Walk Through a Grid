class Solution {
public:
    bool findSafeWalk(vector<vector<int>>& grid, int health) {
        int r=grid.size();
        int c=grid[0].size();

        int drow[]={-1,1,0,0}; //UDLR
        int dcol[]={0,0,-1,1};

        int starthealth=health-grid[0][0];
        if(starthealth <= 0) return false;

        vector<vector<int>>vis(r,vector<int>(c,-1));
        vis[0][0]=starthealth;

        queue<pair<pair<int,int>,int>>q; //<<r,c>,h>
        q.push({{0,0},starthealth});

        while(!q.empty()){
            int row=q.front().first.first;
            int col=q.front().first.second;
            int h=q.front().second;
            q.pop();

            if(row==r-1 && col==c-1 && h>=1) return true;

            for(int i=0; i<4; i++){
                int nrow=row+drow[i];
                int ncol=col+dcol[i];

                if(nrow>=0 && nrow<r && ncol>=0 && ncol<c){
                    int newhealth=h-grid[nrow][ncol];

                    if(newhealth > 0 && newhealth > vis[nrow][ncol]){
                        vis[nrow][ncol]=newhealth;
                        q.push({{nrow,ncol},newhealth});
                    }
                }   
            }
        }
        return false;
    }
};
