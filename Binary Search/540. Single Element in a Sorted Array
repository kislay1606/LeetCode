class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n=nums.size();

        //single element
        if(n==1){
            return nums[0];
        }

        //check first element
        if(nums[0]!=nums[1]){
            return nums[0];
        }

        //check last element
        if(nums[n-1]!=nums[n-2]){
            return nums[n-1];
        }

        int s=1;
        int e=n-2;

        while(s<=e){
            int mid=s+(e-s)/2;

            //mid element is the the single element
            if(nums[mid]!=nums[mid-1] && nums[mid]!=nums[mid+1]){
                return nums[mid];
            }

            //left and right parts are even
            if(mid%2==0){
                //single element is in the left part so eliminate the right part
                if(nums[mid]==nums[mid-1]){
                    e=mid-1;
                }
                //single element is in the right part so eliminate the left part
                else s=mid+1;

            }

            //left and right part are odd
            else {
                //single element is in the right part so eliminate the left part
                if(nums[mid]==nums[mid-1]){
                    s=mid+1;
                }
                //single element is in the left part so eliminate the right part
                else e=mid-1;
            }
        }
        return -1;
    }
};
